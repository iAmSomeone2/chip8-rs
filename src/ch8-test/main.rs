use std::io;
use std::io::Write;
use std::thread::sleep;
use std::time::Duration;

use chip8::{Chip8, Display};

const LOGO_PRG: [u8; 132] = [
    0x0, 0xe0, 0xa2, 0x2a, 0x60, 0xc, 0x61, 0x8, 0xd0, 0x1f, 0x70, 0x9, 0xa2, 0x39, 0xd0, 0x1f,
    0xa2, 0x48, 0x70, 0x8, 0xd0, 0x1f, 0x70, 0x4, 0xa2, 0x57, 0xd0, 0x1f, 0x70, 0x8, 0xa2, 0x66,
    0xd0, 0x1f, 0x70, 0x8, 0xa2, 0x75, 0xd0, 0x1f, 0x12, 0x28, 0xff, 0x0, 0xff, 0x0, 0x3c, 0x0,
    0x3c, 0x0, 0x3c, 0x0, 0x3c, 0x0, 0xff, 0x0, 0xff, 0xff, 0x0, 0xff, 0x0, 0x38, 0x0, 0x3f, 0x0,
    0x3f, 0x0, 0x38, 0x0, 0xff, 0x0, 0xff, 0x80, 0x0, 0xe0, 0x0, 0xe0, 0x0, 0x80, 0x0, 0x80, 0x0,
    0xe0, 0x0, 0xe0, 0x0, 0x80, 0xf8, 0x0, 0xfc, 0x0, 0x3e, 0x0, 0x3f, 0x0, 0x3b, 0x0, 0x39, 0x0,
    0xf8, 0x0, 0xf8, 0x3, 0x0, 0x7, 0x0, 0xf, 0x0, 0xbf, 0x0, 0xfb, 0x0, 0xf3, 0x0, 0xe3, 0x0,
    0x43, 0xe0, 0x0, 0xe0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0xe0, 0x0, 0xe0,
];

const SIXTY_IPS: u64 = 16_667;

fn draw_display(display: &Display) {
    let display_str = format!("\x1b[2J\x1b[1;1H{}", display.as_string());
    let mut stdout_lock = io::stdout().lock();
    stdout_lock.write(display_str.as_bytes()).unwrap();
}

fn main() {
    let sleep_duration = Duration::from_micros(SIXTY_IPS);

    let mut chip8 = Chip8::new();
    chip8.load_program(&LOGO_PRG).expect("could not load test program");

    print!("\x1b[97;40m");
    loop {
        chip8.step().unwrap_or_else(|err| {
            eprintln!("{err}");
        });
        draw_display(chip8.get_display());
        sleep(sleep_duration);
    }
}
